// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YY.EventLogExportAssistant.SQLServer;

namespace YY.EventLogExportAssistant.SQLServer.Migrations
{
    [DbContext(typeof(EventLogContext))]
    partial class EventLogContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("YY.EventLogExportAssistant.SQLServer.Models.Applications", b =>
                {
                    b.Property<long>("InformationSystemId")
                        .HasColumnType("bigint");

                    b.Property<long>("id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("InformationSystemId", "id");

                    b.HasIndex("InformationSystemId", "id")
                        .IsUnique();

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("YY.EventLogExportAssistant.SQLServer.Models.Computers", b =>
                {
                    b.Property<long>("InformationSystemId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("InformationSystemId", "Id");

                    b.HasIndex("InformationSystemId", "Id")
                        .IsUnique();

                    b.ToTable("Computers");
                });

            modelBuilder.Entity("YY.EventLogExportAssistant.SQLServer.Models.Events", b =>
                {
                    b.Property<long>("InformationSystemId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("InformationSystemId", "Id");

                    b.HasIndex("InformationSystemId", "Id")
                        .IsUnique();

                    b.ToTable("Events");
                });

            modelBuilder.Entity("YY.EventLogExportAssistant.SQLServer.Models.InformationSystems", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("InformationSystems");
                });

            modelBuilder.Entity("YY.EventLogExportAssistant.SQLServer.Models.Metadata", b =>
                {
                    b.Property<long>("InformationSystemId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InformationSystemId", "Id");

                    b.HasIndex("InformationSystemId", "Id")
                        .IsUnique();

                    b.ToTable("Metadata");
                });

            modelBuilder.Entity("YY.EventLogExportAssistant.SQLServer.Models.PrimaryPorts", b =>
                {
                    b.Property<long>("InformationSystemId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("InformationSystemId", "Id");

                    b.HasIndex("InformationSystemId", "Id")
                        .IsUnique();

                    b.ToTable("PrimaryPorts");
                });

            modelBuilder.Entity("YY.EventLogExportAssistant.SQLServer.Models.RowData", b =>
                {
                    b.Property<long>("InformationSystemId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("Period")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApplicationInformationSystemId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Applicationid")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ComputerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ComputerInformationSystemId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ConnectId")
                        .HasColumnType("bigint");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataPresentation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataUUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("EventId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EventInformationSystemId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MetadataId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MetadataInformationSystemId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PrimaryPortId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PrimaryPortInformationSystemId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SecondaryPortId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SecondaryPortInformationSystemId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Session")
                        .HasColumnType("bigint");

                    b.Property<long?>("SeverityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SeverityInformationSystemId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TransactionStatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TransactionStatusInformationSystemId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserInformationSystemId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WorkServerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WorkServerInformationSystemId")
                        .HasColumnType("bigint");

                    b.HasKey("InformationSystemId", "Period", "Id");

                    b.HasIndex("ApplicationInformationSystemId", "Applicationid");

                    b.HasIndex("ComputerInformationSystemId", "ComputerId");

                    b.HasIndex("EventInformationSystemId", "EventId");

                    b.HasIndex("MetadataInformationSystemId", "MetadataId");

                    b.HasIndex("PrimaryPortInformationSystemId", "PrimaryPortId");

                    b.HasIndex("SecondaryPortInformationSystemId", "SecondaryPortId");

                    b.HasIndex("SeverityInformationSystemId", "SeverityId");

                    b.HasIndex("TransactionStatusInformationSystemId", "TransactionStatusId");

                    b.HasIndex("UserInformationSystemId", "UserId");

                    b.HasIndex("WorkServerInformationSystemId", "WorkServerId");

                    b.HasIndex("InformationSystemId", "Period", "Id")
                        .IsUnique();

                    b.ToTable("RowsData");
                });

            modelBuilder.Entity("YY.EventLogExportAssistant.SQLServer.Models.SecondaryPorts", b =>
                {
                    b.Property<long>("InformationSystemId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("InformationSystemId", "Id");

                    b.HasIndex("InformationSystemId", "Id")
                        .IsUnique();

                    b.ToTable("SecondaryPorts");
                });

            modelBuilder.Entity("YY.EventLogExportAssistant.SQLServer.Models.Severities", b =>
                {
                    b.Property<long>("InformationSystemId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("InformationSystemId", "Id");

                    b.HasIndex("InformationSystemId", "Id")
                        .IsUnique();

                    b.ToTable("Severities");
                });

            modelBuilder.Entity("YY.EventLogExportAssistant.SQLServer.Models.TransactionStatuses", b =>
                {
                    b.Property<long>("InformationSystemId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("InformationSystemId", "Id");

                    b.HasIndex("InformationSystemId", "Id")
                        .IsUnique();

                    b.ToTable("TransactionStatuses");
                });

            modelBuilder.Entity("YY.EventLogExportAssistant.SQLServer.Models.Users", b =>
                {
                    b.Property<long>("InformationSystemId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InformationSystemId", "Id");

                    b.HasIndex("InformationSystemId", "Id")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("YY.EventLogExportAssistant.SQLServer.Models.WorkServers", b =>
                {
                    b.Property<long>("InformationSystemId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("InformationSystemId", "Id");

                    b.HasIndex("InformationSystemId", "Id")
                        .IsUnique();

                    b.ToTable("WorkServers");
                });

            modelBuilder.Entity("YY.EventLogExportAssistant.SQLServer.Models.Applications", b =>
                {
                    b.HasOne("YY.EventLogExportAssistant.SQLServer.Models.InformationSystems", "InformationSystem")
                        .WithMany()
                        .HasForeignKey("InformationSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YY.EventLogExportAssistant.SQLServer.Models.Computers", b =>
                {
                    b.HasOne("YY.EventLogExportAssistant.SQLServer.Models.InformationSystems", "InformationSystem")
                        .WithMany()
                        .HasForeignKey("InformationSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YY.EventLogExportAssistant.SQLServer.Models.Events", b =>
                {
                    b.HasOne("YY.EventLogExportAssistant.SQLServer.Models.InformationSystems", "InformationSystem")
                        .WithMany()
                        .HasForeignKey("InformationSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YY.EventLogExportAssistant.SQLServer.Models.Metadata", b =>
                {
                    b.HasOne("YY.EventLogExportAssistant.SQLServer.Models.InformationSystems", "InformationSystem")
                        .WithMany()
                        .HasForeignKey("InformationSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YY.EventLogExportAssistant.SQLServer.Models.PrimaryPorts", b =>
                {
                    b.HasOne("YY.EventLogExportAssistant.SQLServer.Models.InformationSystems", "InformationSystem")
                        .WithMany()
                        .HasForeignKey("InformationSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YY.EventLogExportAssistant.SQLServer.Models.RowData", b =>
                {
                    b.HasOne("YY.EventLogExportAssistant.SQLServer.Models.InformationSystems", "InformationSystem")
                        .WithMany()
                        .HasForeignKey("InformationSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YY.EventLogExportAssistant.SQLServer.Models.Applications", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationInformationSystemId", "Applicationid");

                    b.HasOne("YY.EventLogExportAssistant.SQLServer.Models.Computers", "Computer")
                        .WithMany()
                        .HasForeignKey("ComputerInformationSystemId", "ComputerId");

                    b.HasOne("YY.EventLogExportAssistant.SQLServer.Models.Events", "Event")
                        .WithMany()
                        .HasForeignKey("EventInformationSystemId", "EventId");

                    b.HasOne("YY.EventLogExportAssistant.SQLServer.Models.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataInformationSystemId", "MetadataId");

                    b.HasOne("YY.EventLogExportAssistant.SQLServer.Models.PrimaryPorts", "PrimaryPort")
                        .WithMany()
                        .HasForeignKey("PrimaryPortInformationSystemId", "PrimaryPortId");

                    b.HasOne("YY.EventLogExportAssistant.SQLServer.Models.SecondaryPorts", "SecondaryPort")
                        .WithMany()
                        .HasForeignKey("SecondaryPortInformationSystemId", "SecondaryPortId");

                    b.HasOne("YY.EventLogExportAssistant.SQLServer.Models.Severities", "Severity")
                        .WithMany()
                        .HasForeignKey("SeverityInformationSystemId", "SeverityId");

                    b.HasOne("YY.EventLogExportAssistant.SQLServer.Models.TransactionStatuses", "TransactionStatus")
                        .WithMany()
                        .HasForeignKey("TransactionStatusInformationSystemId", "TransactionStatusId");

                    b.HasOne("YY.EventLogExportAssistant.SQLServer.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserInformationSystemId", "UserId");

                    b.HasOne("YY.EventLogExportAssistant.SQLServer.Models.WorkServers", "WorkServer")
                        .WithMany()
                        .HasForeignKey("WorkServerInformationSystemId", "WorkServerId");
                });

            modelBuilder.Entity("YY.EventLogExportAssistant.SQLServer.Models.SecondaryPorts", b =>
                {
                    b.HasOne("YY.EventLogExportAssistant.SQLServer.Models.InformationSystems", "InformationSystem")
                        .WithMany()
                        .HasForeignKey("InformationSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YY.EventLogExportAssistant.SQLServer.Models.Severities", b =>
                {
                    b.HasOne("YY.EventLogExportAssistant.SQLServer.Models.InformationSystems", "InformationSystem")
                        .WithMany()
                        .HasForeignKey("InformationSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YY.EventLogExportAssistant.SQLServer.Models.TransactionStatuses", b =>
                {
                    b.HasOne("YY.EventLogExportAssistant.SQLServer.Models.InformationSystems", "InformationSystem")
                        .WithMany()
                        .HasForeignKey("InformationSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YY.EventLogExportAssistant.SQLServer.Models.Users", b =>
                {
                    b.HasOne("YY.EventLogExportAssistant.SQLServer.Models.InformationSystems", "InformationSystem")
                        .WithMany()
                        .HasForeignKey("InformationSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YY.EventLogExportAssistant.SQLServer.Models.WorkServers", b =>
                {
                    b.HasOne("YY.EventLogExportAssistant.SQLServer.Models.InformationSystems", "InformationSystem")
                        .WithMany()
                        .HasForeignKey("InformationSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
